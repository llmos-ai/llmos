name: main-release

concurrency:
  group: main-release
  cancel-in-progress: true

on:
  push:
    branches:
    - main
    - v*

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ${{ vars.REGISTRY || 'ghcr.io/llmos-ai' }}
  S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
  DEFAULT_REGION: ${{ vars.DEFAULT_REGION || 'us-east-1' }}
  FLAVOR: "leap"

jobs:
  main-cli-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22
        cache: true
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug
    - run: make test && make lint
    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        install-only: true
    - name: Build LLMOS CLI
      run: make build-cli
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push Latest(main) CLI Images
      run: |
        . ./scripts/version
        IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep /llmos-cli:${VERSION})
        for i in ${IMAGES}; do
          docker push $i
        done
        docker manifest create ${{ env.REGISTRY }}/llmos-cli:${TAG} ${IMAGES}
        docker manifest push ${{ env.REGISTRY }}/llmos-cli:${TAG}
        docker manifest create ${{ env.REGISTRY }}/llmos-cli:${VERSION} ${IMAGES}
        docker manifest push ${{ env.REGISTRY }}/llmos-cli:${VERSION}
    - name: Upload install.sh to s3
      run: |
        aws s3 cp ./install.sh s3://${{ env.S3_BUCKET_NAME }}/latest/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.DEFAULT_REGION }}
#    - name: Setup Earthly
#      uses: earthly/actions-setup@v1
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        version: "latest"
#    - name: Build models
#      run: |
#        earthly --ci --push +build-models --REGISTRY=${{ env.REGISTRY }} --VERSION=${{ env.VERSION }}
#    - name: build repo
#      run: make build-repo
#  main-iso-release:
#    needs: main-cli-release
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v3
#    - name: Set up Docker Buildx
#      id: buildx
#      uses: docker/setup-buildx-action@v3
#      with:
#        buildkitd-flags: --debug
#    - name: Login to GitHub Container Registry
#      uses: docker/login-action@v3
#      with:
#        registry: ghcr.io
#        username: ${{ github.actor }}
#        password: ${{ secrets.GITHUB_TOKEN }}
#    - name: package airgap # use package-airgap instead since build-airgap requires DinD support
#      run: make package-airgap && ls -la dist/artifacts/llmos-airgap-* || true
#    - name: Build OS
#      run: make build-os
#    - name: Push Latest(main) OS Images
#      run: |
#        IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep llmos-${{ env.FLAVOR }}:${{ env.VERSION }})
#        for i in ${IMAGES}; do
#          docker push $i
#        done
#        docker manifest create ${{ env.REGISTRY }}/llmos-${{ env.FLAVOR }}:${{ env.VERSION }} ${IMAGES}
#        docker manifest push ${{ env.REGISTRY }}/llmos-${{ env.FLAVOR }}:${{ env.VERSION }}
#    - name: Build ISO
#      run: make build-iso
#    - uses: shallwefootball/s3-upload-action@master
#      name: Upload S3
#      id: S3
#      with:
#        aws_key_id: ${{ secrets.AWS_KEY_ID }}
#        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws_bucket: ${{ vars.AWS_BUCKET }}
#        source_dir: 'dist/iso'
#        destination_dir: 'llmos'
#    - name: Failure Slack Notification
#      if: failure()
#      id: slack-failure
#      uses: slackapi/slack-github-action@v1.24.0
#      with:
#        channel-id: "${{ secrets.SLACK_BOT_FAILURE_CHANNEL }}"
#        slack-message: "‚ùå Main-Release failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#      env:
#        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
